import "dart:async" as GC;import "dart:html" as EB;import "dart:collection" as hB;import "dart:isolate" as QD;class zC{static const  AD="Chrome";final  vC;final  minimumVersion;const zC(this.vC,[this.minimumVersion]);}class BD{final  name;const BD(this.name);}final  HB=QC({'The Cat in the Hat':true,'War and Peace':false,'Pride and Prejudice':true,'On the Road':true,'The Hunger Games':true,'The Java Tutorial':false,'The Joy of Cooking':false,'Goodnight Moon':true}); HC(){EB.window.onLoad.listen((i){var g=(EB.query('#bookselector') as EB.SelectElement).options;print(g.length);g.forEach((h)=>h.selected=HB[h.value]);});} get IC{return HB.keys.where((g)=>HB[g]).toList();} JC( g){var h=(EB.query('#bookselector') as EB.SelectElement).selectedOptions;HB.forEach((i,j)=>HB[i]=false);h.forEach((g)=>HB[g.value]=true);} KC(){var WD=EB.document.body;final XD=new EB.Element.html('<h4>You chose:</h4>'),YD=new EB.Element.html('<select multiple="" id="bookselector">\n            <option style="display:none"></option>\n        </select>'),ZD=new EB.Element.html('<option template="" repeat="key in books.keys"></option>'),aD=new EB.Element.html('<ul>\n           <li style="display:none"></li>\n        </ul>'),bD=new EB.Element.html('<li template="" repeat="selected in booksselected"></li>');var cD;var dD=new uB(WD);cD=WD.nodes[3].nodes[3];dD.xC(cD,()=>!HB.isEmpty,(dD){var eD,fD,gD,hD;fD=YD.clone(true);eD=fD.nodes[1];dD.loop(eD,()=>HB.keys,(h,g,dD){var j=h[g];var iD;iD=ZD.clone(true);var jD=dD.BC(()=>j,false);iD.nodes.add(jD);dD.yC(()=>j,(i){if(iD.value!=i)iD.value=i;},false,false);dD.add(iD);});dD.listen(fD.onChange,(l){JC(l);});hD=aD.clone(true);gD=hD.nodes[1];dD.loop(gD,()=>IC,(h,g,dD){var v=h[g];var kD;kD=bD.clone(true);var lD=dD.BC(()=>v,false);kD.nodes.add(lD);dD.add(kD);});dD.addAll([new EB.Text('\n        \n        '),new EB.Text('\n        '),fD,new EB.Text('\n\n        '),XD.clone(true),new EB.Text('\n        '),hD,new EB.Text('\n      ')]);});dD.aB();dD.insert();}main(){wB=false;HC();KC();}class CD<JB> extends gC with q implements List<JB>{final  mD;CD([ g]):mD=g!=null?new List<JB>(g):<JB>[] ;factory CD.RD( g)=>new CD<JB>()..addAll(g); get length{if(o)w(this,k.p,'length');return mD.length;}set length( h){var i=mD.length;if(i==h)return;if(GB(this)){if(h<i){for(int g=i-1;g>=h;g-- ){m(this,k.LB,g,mD[g],null);}m(this,k.p,'length',i,h);}else{m(this,k.p,'length',i,h);for(int g=i;g<h;g++ ){m(this,k.KB,g,null,null);}}}mD.length=h;} operator[]( g){if(o)w(this,k.CB,g);return mD[g];}operator[]=( g, h){var i=mD[g];if(GB(this)){m(this,k.CB,g,i,h);}mD[g]=h;} add( h){var g=mD.length;if(GB(this)){m(this,k.p,'length',g,g+1);m(this,k.KB,g,null,h);}mD.add(h);} toString(){if(o){for(int g=0;g<length;g++ ){w(this,k.CB,g);}}return mD.toString();}}typedef  TB<s,n>();class PB<s,n> extends q implements Map<s,n>{final  nD;var oD;var pD;PB({ createMap}):nD=createMap!=null?createMap():new Map<s,n>(){oD=new LC<s,n>(this);pD=new MC<s,n>(this);}factory PB.SD( i,{ createMap}){var g=new PB<s,n>(createMap:createMap);i.forEach(( h, j){g[h]=j;});return g;} get keys=>oD; get values=>pD; get length{if(o)w(this,k.p,'length');return nD.length;} get isEmpty=>length==0; get isNotEmpty=>length!=0; qD( g)=>w(this,k.CB,g); rD(){w(this,k.p,'length');nD.keys.forEach(qD);} containsKey( g){if(o)qD(g);return nD.containsKey(g);} operator[]( g){if(o)qD(g);return nD[g];} operator[]=( h, g){var j=nD.length;var i=nD[h];nD[h]=g;if(GB(this)){if(j!=nD.length){m(this,k.p,'length',j,nD.length);m(this,k.KB,h,i,g);}else if(i!=g){m(this,k.CB,h,i,g);}}} putIfAbsent( g, j()){if(o)qD(g);var h=nD.length;var i=nD.putIfAbsent(g,j);if(GB(this)&&h!=nD.length){m(this,k.p,'length',h,nD.length);m(this,k.KB,g,null,i);}return i;} remove( g){if(o)qD(g);var h=nD.length;var i=nD.remove(g);if(GB(this)&&h!=nD.length){m(this,k.LB,g,i,null);m(this,k.p,'length',h,nD.length);}return i;} clear(){var g=nD.length;if(GB(this)&&g>0){nD.forEach((i,h){m(this,k.LB,i,h,null);});m(this,k.p,'length',g,0);}nD.clear();} forEach( g( key, value)){if(o)rD();nD.forEach(g);} toString()=>hB.Maps.mapToString(this);}class LC<s,n> extends hB.IterableBase<s>{final  nD;LC(this.nD); get iterator=>new DD<s,n>(nD);}class DD<s,n> implements Iterator<s>{final  nD;final  oD;var sD=false;DD( g):nD=g,oD=g.nD.keys.iterator; moveNext(){if(o)w(nD,k.p,'length');return sD=oD.moveNext();} get current{var g=oD.current;if(o&&sD)nD.qD(g);return g;}}class MC<s,n> extends hB.IterableBase<n>{final  nD;MC(this.nD); get iterator=>new ED<s,n>(nD);}class ED<s,n> implements Iterator<n>{final  nD;final  oD;final  pD;var sD;ED( g):nD=g,oD=g.nD.keys.iterator,pD=g.nD.values.iterator; moveNext(){if(o)w(nD,k.p,'length');var h=oD.moveNext();var g=pD.moveNext();if(h!=g){throw new StateError('keys and values should be the same length');}return sD=g;} get current{if(o&&sD)nD.qD(oD.current);return pD.current;}}typedef  FB( e);typedef  NC( changes);typedef  IB();typedef  OC();class cB{final oldValue;final newValue;final  changes;cB(this.oldValue,this.newValue,[this.changes]); operator==(g){return g is cB&&oldValue==g.oldValue&&newValue==g.newValue&&changes==g.changes;} get hashCode=>cC(oldValue,newValue,changes); toString(){if(changes!=null)return '#<ChangeNotification to ${newValue}: ${changes}>';return '#<ChangeNotification from ${oldValue} to ${newValue}>';}}class k{static const p=1;static const CB=2;static const KB=CB|4;static const LB=CB|8;final  type;final key;final oldValue;final newValue;k(this.type,this.key,this.oldValue,this.newValue); operator==(g){return g is k&&type==g.type&&key==g.key&&oldValue==g.oldValue&&newValue==g.newValue;} get hashCode=>dC(type,key,oldValue,newValue); toString(){var g;switch (type){case p:g='field';break;case CB:g='index';break;case KB:g='insert';break;case LB:g='remove';break;}return '#<ChangeRecord ${g} ${key} from ${oldValue} to ${newValue}>';}} PC(g, i,[ l]){if(g is q){var h=g;return iB(h,(v){i(new cB(h,h,v));});}var j=new dB(g,i,l);if(!j.tD()){return SC;}return j.uD;} iB( g, i){if(g.SB==null)g.SB=new jB();var h=g.SB.add(i);return h.remove;}QC(g){if(g is Map){var h=null;if(g is hB.SplayTreeMap){h=()=>new hB.SplayTreeMap();}else if(g is hB.LinkedHashMap){h=()=>new hB.LinkedHashMap();}return new PB.SD(g,createMap:h);}if(g is Set)return new tB.TD(g);if(g is Iterable)return new CD.RD(g);return g;}class q{var SB;var RB;final  hashCode= ++q.RC;static var RC=0;} GB( g)=>g.SB!=null&&g.SB.head!=null; get o=>QB!=null; w( g, h,i)=>QB.vD(g,h,i); m( g, j,l, h, i){if((j&(k.KB|k.LB))==0){if(h==i)return;}if(MB==null){MB=[] ;eC(TC);}if(g.RB==null){g.RB=[] ;MB.add(g);}g.RB.add(new k(j,l,h,i));} SC(){}var QB;var sB=100;var MB;var NB; TC(){var v=0;while (MB!=null||NB!=null){var j=MB;MB=null;var i=NB;NB=null;if(v++ ==sB){UC(j,i);return;}if(j!=null){for(var h in j){var bB=h.RB;h.RB=null;for(var g=h.SB.head;g!=null;g=g.next){var l=g.value;try {l(bB);}catch (rB,OB){UB(rB,OB,l,'from ${h}');}}}}if(i!=null){i.forEach((PD,qB){qB.wD();});}}} UC( l, j){var g=[] ;if(l!=null){for(var i in l){var bB=i.RB;g.add('${i} ${bB}');}}if(j!=null){for(var v in j.values){var h=v.wD();if(h!=null)g.add('${v} ${h}');}}MB=null;NB=null;var OB='exceeded notifiction limit of ${sB}, possible ' 'circular reference in observer callbacks: ${g.take(10).join(", ")}';XC(OB);}class dB{static var VC=0;final  xD= ++dB.VC;final  yD;final  zD;final  AE;final  BE=new Map();final  CE=[] ;var DE=false;var EE;dB(this.yD,this.zD,this.AE); toString()=>AE!=null?'<observer ${xD}: ${AE}>':'<observer ${xD}>'; tD(){var h=QB;QB=this;try {EE=yD();if(EE is Iterable&&EE is !List&&EE is !q){EE=(EE as Iterable).toList();}}catch (g,i){UB(g,i,yD,'from ${this}');EE=null;}BE.forEach(FE);BE.clear();assert(QB==this);QB=h;GE();return CE.length>0;} HE( i){try {zD(i);}catch (g,h){UB(g,h,zD,'from ${this}');}} GE(){var g=EE;if(g is !q)return;CE.add(iB(g,(h){HE(new cB(g,g,h));}));} vD( v, OB,g){var i=BE.putIfAbsent(v,()=>new Map());try {var h=i[g];if(h==null)h=0;i[g]=h|OB;}catch (j,l){UB(j,l,g,'hashCode or operator == from ${this}');}} FE( i, j){CE.add(iB(i,(l){if(DE)return;for(var g in l){var h=j[g.key];if(h!=null&&(h&g.type)!=0){DE=true;if(NB==null){NB=new hB.SplayTreeMap();}NB[xD]=this;return;}}}));} uD(){for(var g in CE){g();}DE=false;} wD(){if(!DE)return null;var g=EE;uD();tD();try {if(g==EE)return null;}catch (i,j){UB(i,j,g,'operator == from ${this}');return null;}var h=new cB(g,EE);HE(h);return h;}}typedef  WC( message);var XC=(g)=>print(g);typedef  YC(error,stackTrace,obj, message);var UB=ZC; ZC(i,g,h, j){print('web_ui.observe: unhandled error calling ${h} ${j}.\n' 'error:\n${i}\n\nstack trace:\n${g}');}class tB<DB> extends fC with q implements Set<DB>{final  IE;final  JE;tB({ createMap}):IE=createMap!=null?createMap():new Map<DB,Object>(),JE=createMap;factory tB.TD( g,{ createMap}){return new tB<DB>(createMap:createMap)..addAll(g);} contains( g){if(o)w(this,k.CB,g);return IE.containsKey(g);} add( g){var h=IE.length;IE[g]=const Object();if(h!=IE.length){m(this,k.p,'length',h,IE.length);m(this,k.KB,g,null,g);}} remove( g){if(o)w(this,k.CB,g);var h=IE.length;IE.remove(g);if(h!=IE.length){if(GB(this)){m(this,k.LB,g,g,null);m(this,k.p,'length',h,IE.length);}return true;}return false;} clear(){if(GB(this)){for(var g in IE.keys){m(this,k.LB,g,g,null);}m(this,k.p,'length',IE.length,0);}IE.clear();} get length{if(o)w(this,k.p,'length');return IE.length;} get isEmpty=>length==0; get iterator=>new FD<DB>(this); addAll( g)=>g.forEach(add); toString(){if(o){for(DB g in IE.keys){w(this,k.CB,g);}}return IE.keys.toSet().toString();}}class FD<DB> implements Iterator<DB>{final  KE;final  LE;var ME=false;FD( g):KE=g,LE=g.IE.keys.iterator; moveNext(){KE.length;return ME=LE.moveNext();} get current{var g=LE.current;if(o&&ME)w(KE,k.CB,g);return g;}}class aC{aC();}class bC{bC();}class AB<BB>{var NE;var OE;var PE;var QE;AB.UD( g,this.PE):QE=g{if(PE!=null)PE.RE++ ;} get next=>OE; get value=>QE;set value( g)=>QE=g; SE( g, h){OE=h;NE=g;if(g!=null)g.OE=this;if(h!=null)h.NE=this;return this;} append( g)=>new AB<BB>.UD(g,PE).SE(this,OE); remove(){if(PE==null)return;PE.RE-- ;if(NE!=null){NE.OE=OE;}else{PE.TE=OE;}if(OE!=null){OE.NE=NE;}else{PE.UE=NE;}OE=null;NE=null;PE=null;}}class jB<BB> extends hB.IterableBase<BB>{var TE;var UE; get length=>RE;var RE=0;jB(){} get head=>TE; add( h){var g=new AB<BB>.UD(h,this);if(UE==null)return TE=UE=g;return UE=g.SE(UE,null);} addLast( g)=>add(g); addAll( g)=>g.forEach(add); get iterator=>new GD<BB>(this);}class GD<BB> implements Iterator<BB>{var VE;var PE;var WE;var XE=-1;GD(this.PE){VE=new List<AB>(PE.length);var h=0;var g=PE.head;while (g!=null){VE[h++ ]=g;g=g.next;}} get current=>WE; moveNext(){do{XE++ ;}while(XE<VE.length&&VE[XE].PE!=PE);if(XE<VE.length){WE=VE[XE].value;return true;}else{WE=null;return false;}}}VB(h,g)=>h.hashCode*31+g.hashCode;cC(h,g,i)=>VB(VB(h,g),i);dC(g,i,h,j)=>VB(VB(g,i),VB(h,j)); eC( h()){var g=new QD.ReceivePort();g.receive((i,j){g.close();h();});g.toSendPort().send(null);}abstract class fC extends hB.IterableBase<dynamic>{}abstract class gC extends hB.ListMixin<dynamic>{} hC(i, g,[ h]){var j=i is aC;if(h==null){h=i.toString();}if(!j&&g is EB.Text){g.text=h;}else{var l=g;g=j?new EB.Element.html(h):new EB.Text(h);l.replaceWith(g);}return g;} iC(g){if(g is bC)return g.toString();g=g.toString();return kC(g)?g:'#';}const jC=const["http","https","ftp","mailto"]; kC( h){var g=Uri.parse(h).scheme;if(g=='')return true;return jC.contains(g.toLowerCase())||"MAILTO"==g.toUpperCase();}abstract class WB{ aB(){} insert(); remove();}class HD extends WB{final  CC;var YE;final  listener;HD(this.CC,this.listener); insert(){YE=CC.listen(listener);} remove(){YE.cancel();YE=null;}}class ID extends WB{final exp;final  action;final  isFinal;var t;ID(this.exp,this.action,this.isFinal); insert(){if(isFinal){action(new cB(null,exp()));}else if(t!=null){throw new StateError('binding already attached');}else{t=eB(exp,action,'generic-binding');}} remove(){if(!isFinal){t();t=null;}}}class JD extends WB{final  FC;final  oB;final  DC;final  isFinal;var t;JD(this.oB,this.FC,this.DC,this.isFinal); ZE(g){FC(DC?iC(g):g);} insert(){if(isFinal){ZE(oB());}else if(t!=null){throw new StateError('data binding already attached.');}else{t=eB(oB,(g)=>ZE(g.newValue),'dom-property-binding');}} remove(){if(!isFinal){t();t=null;}}}class uB extends WB{final  pB;final  children=[] ;final  nodes=[] ;uB(this.pB); listen( i, h){children.add(new HD(i,(g){h(g);qC();}));} BC( h,i){var g=new EB.Text('');children.add(new ID(()=>'${h()}',(j){g=hC(h(),g,j.newValue);},i));return g;} yC(g,j,h,[i=false]){children.add(new JD(g,j,i,h));} xC( h,g,i){children.add(new mC(h,g,i));} loop( h,g,i){children.add(new KD(h,g,i));} add( g)=>nodes.add(g); addAll( g)=>nodes.addAll(g); aB(){for(var g=0,h=children.length;g<h;g++ ){children[g].aB();}} insert(){for(var g=0,h=children.length;g<h;g++ ){children[g].insert();}} remove(){for(var g=children.length-1;g>=0;g-- ){children[g].remove();}children.clear();}}abstract class vB extends uB{final exp;var t;vB( g,this.exp):super(g); aB(){} insert(){super.aB();if(nodes.length>0){var i=pB.parentNode;var j=pB.nextNode;for(var g=0,h=nodes.length;g<h;g++ ){i.insertBefore(nodes[g],j);}}super.insert();} remove(){super.remove();for(var g=nodes.length-1;g>=0;g-- ){nodes[g].remove();}nodes.clear();}}typedef  lC( template);class mC extends vB{var gB=false;final  AC;mC( h,g,this.AC):super(h,g); insert(){t=eB(exp,(g){if(!gB&&g.newValue){AC(this);super.insert();gB=true;}else if(gB&&!g.newValue){super.remove();gB=false;}},'conditional-binding');} remove(){super.remove();t();t=null;}}typedef  nC( list, index, template);class KD extends vB{final  EC;KD( h,g,this.EC):super(h,g); insert(){t=eB(exp,(i){super.remove();var h=i.newValue;for(int g=0;g<h.length;g++ ){EC(h,g,this);}super.insert();},'loop-binding');} remove(){super.remove();t();t=null;}}var wB=false; oC(g, v,[ l]){if(wB)return PC(g,v);if(v==null)return (){};if(XB==null)XB=new jB<YB>();var i;var h=u.uC;if(g is zB){i=(g as zB).aE;}else if(g is Function){i=g;try {var j=g();if(j is List){h=u.ZB;}else if(j is Iterable){h=u.ZB;i=()=>g().toList();}else if((j is hB.LinkedHashMap)||(j is hB.SplayTreeMap)){h=u.mB;}else if(j is Map){h=u.lB;}}catch (bB,qB){print('error: evaluating ${l!=null?l:"<unnamed>"} ' 'watcher threw error (${bB}, ${qB})');}}else if(g is List){i=()=>g;h=u.ZB;}else if(g is Iterable){i=()=>g.toList();h=u.ZB;}else if((g is hB.LinkedHashMap)||(g is hB.SplayTreeMap)){i=()=>g;h=u.mB;}else if(g is Map){i=()=>g;h=u.lB;}var OB=pC(h,i,v,l);var rB=XB.add(OB);return rB.remove;} pC( j, g, i, h){switch (j){case u.ZB:return new LD(g,i,h);case u.mB:return new ND(g,i,h);case u.lB:return new MD(g,i,h);default:return new YB(g,i,h);}} eB(h,i,[j]){var l=oC(h,i,j);var g=h;if(g is Function){g=g();}if(g is Iterable&&g is !List){g=g.toList();}i(new cB(null,g));return l;}var XB;class YB{final  nB;final  aE;final  bE;var cE;YB(this.aE,this.bE,this.nB){cE=aE();} toString()=>nB==null?'<unnamed>':nB; wC(){var g=dE();if(eE(g)){var h=cE;fE(g);bE(new cB(h,g));return true;}return false;} eE(g)=>cE!=g; fE(g){cE=g;}dE(){try {return aE();}catch (g,h){print('error: evaluating ${this} watcher threw an exception (${g}, ${h})');}return cE;}}final  xB=10; qC(){if(XB==null)return;var g;var h=0;do{g=false;for(var i in XB){if(i.wC()){g=true;}}}while(g&& ++h<xB);if(h==xB){print('Possible loop in watchers propagation, stopped dispatch.');}}typedef  yB<rC>();typedef  sC<rC>( value);class zB<rC>{zB();}class LD<rC> extends YB{LD(g, i, h):super(g,i,h){fE(dE());} eE( g){return kB(cE,g);} fE(g){cE=new List<rC>.from(g);}}class MD<fB,tC> extends YB{MD(g, i, h):super(g,i,h){fE(dE());} eE( g){var i=cE.keys;if(i.length!=g.keys.length)return true;var j=i.iterator;while (j.moveNext()){var h=j.current;if(!g.containsKey(h))return true;if(cE[h]!=g[h])return true;}return false;} fE(g){cE=new Map<fB,tC>.from(g);}}class ND<fB,tC> extends YB{ND(g, i, h):super(g,i,h){fE(dE());} eE( g){return kB(g.keys,cE.keys)||kB(g.values,cE.values);} fE(g){cE=new hB.LinkedHashMap.from(g);}} kB( i, j){var h=i.iterator;var g=j.iterator;while (h.moveNext()){if(!g.moveNext())return true;if(h.current!=g.current)return true;}return g.moveNext();}class u{final gE;const u.VD(this.gE);toString()=>'Enum.${gE}';static const ZB=const u.VD('LIST');static const lB=const u.VD('HASH_MAP');static const mB=const u.VD('ORDERED_MAP');static const uC=const u.VD('OTHER');}//@ sourceMappingURL=multiselect.html_bootstrap.dart.map
